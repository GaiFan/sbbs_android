package com.yuchao.ui;

import java.io.IOException;

import org.json.JSONException;

import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.gfan.sbbs.MyApplication;
import com.gfan.task2.TaskResult;
import com.umeng.analytics.MobclickAgent;
import com.yuchao.domain.Topic;
import com.yuchao.task.GenericTask;
import com.yuchao.task.TaskAdapter;
import com.yuchao.task.TaskListener;
import com.yuchao.util.SBBSSupport;
import com.yuchao.util.TopicAdapter;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

public class WritePost extends com.gfan.ui.base.BaseActivity {
	private EditText titleView, contentView;
	private String boardID, reTitle, title, content;
	private Integer reID, id;// 回复帖子id，该帖id
	private GenericTask doPostTask, doEditTask;
	private TopicAdapter topicAdapter;
	private static final int TYPE_POST = 0;
	private static final int TYPE_EDIT = 1;
	private int type = 0;// 默认为发文模式

	private static final int MENU_SEND = 0;

	private TaskListener doPostListener = new TaskAdapter() {
		ProgressDialog pdialog;

		@Override
		public String getName() {
			return "doPostListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			pdialog = new ProgressDialog(WritePost.this);
			pdialog.setMessage("正在发送...");
			pdialog.show();
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			pdialog.dismiss();
			send(result);
		}
	};

	@Override
	protected void _onCreate(Bundle savedInstanceState) {
		super._onCreate(savedInstanceState);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		LayoutInflater inflater = getLayoutInflater();
		LinearLayout newPostLayout = (LinearLayout) inflater.inflate(
				R.layout.newpost, null);
		this.setContentView(newPostLayout);
		initView();
		type = getIntent().getExtras().getInt("TYPE");
		if (TYPE_POST == type) {
			boardID = getIntent().getExtras().getString("boardID");
			reID = getIntent().getExtras().getInt("reID");
			reTitle = getIntent().getExtras().getString("title");
			content = getIntent().getExtras().getString("content");
			setTitle("写文章");
		} else if (TYPE_EDIT == type) {
			Topic topic = (Topic) getIntent().getExtras().getSerializable(
					"topic_edit");
			boardID = topic.getTalkSpace();
			id = topic.getId();
			reTitle = topic.getTitle();
			content = topic.getContent();
			contentView.setText(content);
			setTitle("编辑文章");
		}

		if (reTitle != null) {
			titleView.setText(reTitle);
			contentView.requestFocus();
			contentView.setSelection(0);
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}

	private boolean validate() {
		title = titleView.getText().toString();
		if (TextUtils.isEmpty(title)) {
			Toast.makeText(WritePost.this, "标题不能为空", Toast.LENGTH_SHORT).show();
			return false;
		}
		if (reID == null) {
			reID = 0;
		}
		return true;
	}

	private void doPost() {
		doPostTask = new DoPostTask();
		doPostTask.setListener(doPostListener);
		content = contentView.getText().toString().trim();
		doPostTask.execute(boardID, reID.toString(), title, content, token);
	}

	private void doEdit() {
		doEditTask = new doEditTask();
		doEditTask.setListener(doPostListener);
		title = titleView.getText().toString().trim();
		content = contentView.getText().toString().trim();
		doEditTask.execute(boardID, id.toString(), title, content, token);
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	private void initView() {
		titleView = (EditText) this.findViewById(R.id.newpostTitle);
		contentView = (EditText) this.findViewById(R.id.newpostcontent);
	}

	private void send(TaskResult result) {

		if (TaskResult.IO_ERROR == result) {
			Toast.makeText(this, "发表失败，请重新发送", Toast.LENGTH_SHORT).show();
			return;
		}
		boolean success = topicAdapter.isSuccess();
		if (success) {
			Toast.makeText(this, "发表成功", Toast.LENGTH_SHORT).show();
			Intent intent = new Intent(this, SinglePostActivity.class);
			Bundle bundle = new Bundle();
			Topic topic = topicAdapter.getTopic();
			bundle.putSerializable("topic", topic);
			intent.putExtras(bundle);
			startActivity(intent);
			finish();
		} else {
			String error = topicAdapter.getError();
			Toast.makeText(this, error, Toast.LENGTH_SHORT).show();
			return;
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, MENU_SEND, Menu.NONE, "post")
				.setIcon(R.drawable.ic_menu_send_holo_light)
				.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case MENU_SEND: {
			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(contentView.getWindowToken(), 0);
			if (validate()) {
				if (type == TYPE_POST) {
					doPost();
				} else {
					doEdit();
				}
			}
			break;
		}
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onDestroy() {
		if (null != doPostTask && !doPostTask.isCancelled()) {
			doPostTask.cancel(true);
		}
		Log.d("WritePost", "activity destroyed");
		super.onDestroy();
	}

	private class DoPostTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			try {
				// result = SBBSSupport.doPost(board, reid, post, title,
				// content);
				topicAdapter = SBBSSupport.doPostAPI(params);
			} catch (IOException e) {
				e.printStackTrace();
				return TaskResult.IO_ERROR;
			} catch (JSONException e) {
				e.printStackTrace();
				return TaskResult.IO_ERROR;
			}
			return TaskResult.OK;
		}
	}

	private class doEditTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			try {
				topicAdapter = SBBSSupport.doPostEdit(params);
			} catch (IOException e) {
				e.printStackTrace();
				return TaskResult.IO_ERROR;
			} catch (JSONException e) {
				e.printStackTrace();
				return TaskResult.IO_ERROR;
			}
			return TaskResult.OK;
		}

	}

	@Override
	protected void processUnLogin() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void setup() {
		// TODO Auto-generated method stub

	}
}
