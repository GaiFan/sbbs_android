package com.gfan.frament;

import java.util.List;


import android.app.Activity;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Toast;

import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.SherlockFragment;
import com.gfan.http.HttpException;
import com.gfan.sbbs.ActivityFragmentTargets;
import com.gfan.sbbs.MyApplication;
import com.gfan.sbbs.OnOpenActivityFragmentListener;
import com.gfan.sbbs.Preferences;
import com.gfan.sbbs.SBBSConstants;
import com.gfan.task2.TaskResult;
import com.gfan.ui.Adapter.BoardListAdapter;
import com.gfan.ui.base.HomeViewModel;
import com.yuchao.domain.Board;
import com.yuchao.task.GenericTask;
import com.yuchao.task.TaskAdapter;
import com.yuchao.task.TaskListener;
import com.gfan.ui.base.BaseViewModel;
import com.gfan.utils.MyListView;
import com.yuchao.ui.R;

public class FavFragment extends SherlockFragment implements
		BaseViewModel.OnViewModelChangObserver {

	private MyListView favListView;

	private List<Board> favList;
	private boolean isLoaded = false, isLogined;
	public static boolean onRoot = true;
	private String favUrl,errorCause;
	private BoardListAdapter myAdapter;
	private GenericTask mMarkReadTask, mRetrieveTask;
	private HomeViewModel mHomeViewModel;
	private OnOpenActivityFragmentListener mOnOpenActivityListener;

	private LayoutInflater mInflater;
	private View mLayout;

	private static final String TAG = "FavFragment";

	private TaskListener mRetrieveTaskListener = new TaskAdapter() {
		ProgressDialog pdialog;

		@Override
		public String getName() {
			return "mRetrieveTaskListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			pdialog = new ProgressDialog(getSherlockActivity());
			pdialog.setMessage(getResources().getString(R.string.loading));
			pdialog.show();
			pdialog.setCancelable(false);
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			pdialog.dismiss();
			favListView.onRefreshComplete();
			
			processResult(result);
		}
	};

	private TaskListener mMarkBoardReadTaskListener = new TaskAdapter() {

		@Override
		public String getName() {
			return "mMarkBoardReadTaskListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			if (TaskResult.OK == result) {
				Toast.makeText(MyApplication.mContext, "成功标记已读",
						Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(MyApplication.mContext, "标记已读失败",
						Toast.LENGTH_SHORT).show();
			}
		}

	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);
		setRetainInstance(true);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		Activity parentActivity = getSherlockActivity();
		if (parentActivity instanceof OnOpenActivityFragmentListener) {
			mOnOpenActivityListener = (OnOpenActivityFragmentListener) parentActivity;
		}
		initArgs();
		initEvents();
		if (isLogined) {
			if (null != mHomeViewModel.getCurrentTab()
					&& ActivityFragmentTargets.TAB_FAV.equals(mHomeViewModel
							.getCurrentTab())) {
				doRetrieve();
			}
		} else {
			processUnlogin();
		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		mInflater = inflater;
		mLayout = mInflater.inflate(R.layout.list_without_header, null);
		mHomeViewModel = ((MyApplication) getActivity().getApplication())
				.getmHomeViewModel();
		mHomeViewModel.registerViewModelChangeObserver(this);
		return mLayout;
	}

	private void doRetrieve() {
		if (null != mRetrieveTask
				&& mRetrieveTask.getStatus() == GenericTask.Status.RUNNING) {
			return;
		}
		mRetrieveTask = new RetrieveFavTask();
		mRetrieveTask.setListener(mRetrieveTaskListener);
		mRetrieveTask.execute(favUrl);
	}

	private void markBoardRead(Board board) {
		if (null == board) {
			return;
		}
		if (board.isDirectory()) {
			List<Board> childList = board.getChildBoards();
			for (int i = 0, len = childList.size(); i < len; i++) {
				if (childList.get(i).isDirectory()) {
					markBoardRead(childList.get(i));
				}
			}
		} else {
			String url = "http://bbs.seu.edu.cn/api/board/" + board.getId()
					+ "/markread.json?token=" + MyApplication.getToken();
			mMarkReadTask = new MarkBoardReadTask();
			mMarkReadTask.setListener(mMarkBoardReadTaskListener);
			mMarkReadTask.execute(url);
		}

	}

	private void initArgs() {
		isLogined = MyApplication.checkLogin();
		favUrl = SBBSConstants.FAVURL;
		if (isLogined) {
			favUrl = favUrl.concat("?token=" + MyApplication.getToken());
		}
		favListView = (MyListView) mLayout.findViewById(R.id.my_list);
		myAdapter = new BoardListAdapter(mInflater);
		favListView.setAdapter(myAdapter);
		getSherlockActivity().getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
	}

	private void initEvents() {
		favListView.setonRefreshListener(new MyListView.OnRefreshListener() {

			@Override
			public void onRefresh() {
				doRetrieve();
			}
		});
		favListView
				.setOnItemClickListener(new AdapterView.OnItemClickListener() {

					@Override
					public void onItemClick(AdapterView<?> arg0, View arg1,
							int position, long id) {
						Board board = getContextItemBoard(position);
						if (null == board) {
							return;
						}
						if (board.isDirectory()) {
							List<Board> list = board.getChildBoards();
							if (null == list || list.size() == 0) {
								Toast.makeText(getSherlockActivity(), "空目录",
										Toast.LENGTH_SHORT).show();
								return;
							}
							board.setHasUnread(false);
							draw(list);
							onRoot = false;
						} else {
							Bundle bundle = new Bundle();
							boolean flag = MyApplication.mPreference
									.getBoolean(Preferences.OneTopic, false);
							int mode = 0;
							if (flag) {
								mode = 2;
							}
							bundle.putInt("mode", mode);
							bundle.putString("boardID", board.getId());
							bundle.putString("boardName", board.getTitle());
							mOnOpenActivityListener.onOpenActivityOrFragment(
									ActivityFragmentTargets.TOPICLIST, bundle);
							board.setHasUnread(false);
							draw();
						}
					}
				});
	}

	private Board getContextItemBoard(int position) {
		if (position >= 1 && position <= myAdapter.getCount()) {
			return (Board) myAdapter.getItem(position - 1);
		} else {
			return null;
		}
	}

	private void processResult(TaskResult result) {
		if (TaskResult.Failed == result) {
			Toast.makeText(getSherlockActivity(), errorCause,
					Toast.LENGTH_SHORT).show();
			return;
		} else if (TaskResult.NO_DATA == result) {
			Toast.makeText(getSherlockActivity(), R.string.fav_no_data,
					Toast.LENGTH_SHORT).show();
			return;
		}
		isLoaded = true;
		draw();
		goTop();
	}

	private void draw() {
		myAdapter.refresh(favList);
		onRoot = true;
	}

	private void draw(List<Board> list) {
		myAdapter.refresh(list);
	}

	private void goTop() {
		favListView.setSelection(1);
	}

	private void processUnlogin() {
		Toast.makeText(getSherlockActivity(), "请登录", Toast.LENGTH_SHORT).show();
	}

	/**
	 * TODO when click on the icon,back to the rootList current codes does not
	 * work
	 */
//	@Override
//	public boolean onOptionsItemSelected(MenuItem item) {
//		int id = item.getItemId();
//		if (id == android.R.id.home) {
//			Toast.makeText(getSherlockActivity(), TAG+"-->r.id.home", Toast.LENGTH_SHORT).show();
//			if (!onRoot) {
//				draw();
//				return true;}
//			else {
//				return super.onOptionsItemSelected(item);
//			}
//		}
//		return super.onOptionsItemSelected(item);
//	}


	
	@Override
	public void onDestroy() {

		if (null != mRetrieveTask
				&& mRetrieveTask.getStatus() == GenericTask.Status.RUNNING) {
			mRetrieveTask.cancel(true);
		}
		super.onDestroy();
	}

	private class MarkBoardReadTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
//			boolean result = SBBSSupport.markBoardRead(params[0]);
			boolean result = MyApplication.bbsOp.getBoolean(params[0]);
			if (result) {
				return TaskResult.OK;
			}
			return TaskResult.Failed;
		}

	}

	private class RetrieveFavTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			try {
				favList = MyApplication.bbsOp.getFavList(params[0]);
			} catch(HttpException e){
				errorCause = e.getMessage();
				return TaskResult.Failed;
			}
			if (null == favList || favList.size() == 0) {
				return TaskResult.NO_DATA;
			}
			return TaskResult.OK;
		}

	}

	@Override
	public void onViewModelChange(BaseViewModel viewModel,
			String changedPropertyName, Object... params) {

		if (!isLogined) {
			processUnlogin();
			return;
		}
		if (HomeViewModel.CURRENTTAB_PROPERTY_NAME.equals(changedPropertyName)) {
			if (!isLoaded
					&& mHomeViewModel.getCurrentTab().equals(
							ActivityFragmentTargets.TAB_FAV)) {
				doRetrieve();
			} else if (isLoaded
					&& mHomeViewModel.getCurrentTab().equals(
							ActivityFragmentTargets.TAB_FAV)) {
				draw();
			}
		}
	}

}
