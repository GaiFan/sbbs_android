package com.yuchao.ui;

import net.courage.tab.view.AnimationTabHost;

import com.umeng.analytics.MobclickAgent;
import com.umeng.update.UmengDownloadListener;
import com.umeng.update.UmengUpdateAgent;
import com.yuchao.ui.R;
import com.gfan.sbbs.MyApplication;
import com.gfan.sbbs.Preferences;
import com.gfan.service.SBBSService;
import com.gfan.task2.TaskResult;
import com.yuchao.util.CustomAlertDialog;
import com.yuchao.util.CustomProgressDialog;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.app.TabActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo.State;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Parcelable;
import android.provider.Settings;
import android.util.Log;
import android.view.GestureDetector;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.Window;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TabHost;
import android.widget.TabHost.OnTabChangeListener;
import android.widget.TextView;
import android.widget.Toast;

public class HomeActivity extends TabActivity implements
		OnCheckedChangeListener, OnTabChangeListener {

	private AnimationTabHost mHost;
	private Intent mTopIntent;
	private Intent mMailIntent;
	private Intent mFavIntent;
	private Intent mMoreIntent;
	private Intent mSearchIntent;
	private int currentTabID;
	private GestureDetector gestureDetector;
	private RadioGroup radioGroup;
	private MyApplication application;
	private long exitTime = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		application = (MyApplication) getApplication();
		MobclickAgent.onError(this);// 错误反馈
		checkNetworkInfo();
		manageUpdateChecks();
		if (application.isAutoUpdate()) {
			long updateTime = ((long) application.getUpdateInterval()) * 1000
					* 60 * 60 * 24;
			UmengUpdateAgent.update(this, updateTime);
			Log.i("MyApplication",
					"update Interval is " + application.getUpdateInterval());
		}
		UmengUpdateAgent.setUpdateOnlyWifi(application.isUpdate_wifi());
		UmengUpdateAgent.setOnDownloadListener(new UmengDownloadListener() {

			@Override
			public void OnDownloadEnd(int result) {
				if (1 == result) {
					Toast.makeText(HomeActivity.this, "下载完成",
							Toast.LENGTH_SHORT).show();
				} else {
					Toast.makeText(HomeActivity.this, "下载失败",
							Toast.LENGTH_SHORT).show();
				}
			}
		});
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.homeactivity);

		// ~~~~~~~~~~~~ 初始化
		this.mTopIntent = new Intent(this, HotActivity.class);
		this.mMailIntent = new Intent(this, MailActivity.class);
		this.mFavIntent = new Intent(this, FavActivity.class);
		this.mMoreIntent = new Intent(this, MoreActivity.class);
		this.mSearchIntent = new Intent(this, SearchActivity.class);
		initRadios();
		setupIntent();
		// 登录用户默认页面为收藏夹，否则为十大
		if (application.isLogined()) {
			this.mHost.setCurrentTabByTag("fav_tab");
		} else {
			this.mHost.setCurrentTabByTag("mtop_tab");
		}
		// showNotification();
		gestureDetector = new GestureDetector(new TabHostTouch());
		createShortCut();
	}

	protected void manageUpdateChecks() {
		// 检查后台更新状态设置
		boolean isUpdateEnabled = application.getmPreference().getBoolean(
				com.gfan.sbbs.Preferences.CHECK_UPDATE, false);
		boolean isLogined = application.isLogined();
		if (isUpdateEnabled && isLogined) {
			SBBSService.schedule(this);
		}
	}

	@Override
	public void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}

	@Override
	protected void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	/**
	 * 初始化底部按钮
	 */
	private void initRadios() {
		((RadioButton) findViewById(R.id.home_radio))
				.setOnCheckedChangeListener(this);
		((RadioButton) findViewById(R.id.fav_radio))
				.setOnCheckedChangeListener(this);
		((RadioButton) findViewById(R.id.search_radio))
				.setOnCheckedChangeListener(this);
		((RadioButton) findViewById(R.id.mail_radio))
				.setOnCheckedChangeListener(this);
		((RadioButton) findViewById(R.id.more_radio))
				.setOnCheckedChangeListener(this);
	}

	/**
	 * 切换模块
	 */
	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		if (isChecked) {
			switch (buttonView.getId()) {
			case R.id.home_radio:
				this.mHost.setCurrentTabByTag("mtop_tab");
				break;
			case R.id.mail_radio:
				this.mHost.setCurrentTabByTag("mail_tab");
				break;
			case R.id.more_radio:
				this.mHost.setCurrentTabByTag("more_tab");
				break;
			case R.id.fav_radio:
				this.mHost.setCurrentTabByTag("fav_tab");
				break;
			case R.id.search_radio:
				this.mHost.setCurrentTabByTag("notice_tab");
				break;
			}
		}
	}

	@Override
	public void onTabChanged(String tabId) {
		// int tabID = Integer.valueOf(tabId);
		int tabID = this.mHost.getCurrentTab();
		radioGroup = (RadioGroup) this.findViewById(R.id.main_radio);
		radioGroup
				.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {

					@Override
					public void onCheckedChanged(RadioGroup group, int checkedId) {

					}
				});
		for (int i = 0; i < radioGroup.getChildCount(); i++) {
			if (i == tabID) {
				((RadioButton) radioGroup.getChildAt(Integer.valueOf(i)))
						.setChecked(true);
			} else {
				((RadioButton) radioGroup.getChildAt(Integer.valueOf(i)))
						.setChecked(false);
			}
			radioGroup.getChildAt(Integer.valueOf(i)).refreshDrawableState();
		}

	}

	private void setupIntent() {
		this.mHost = (AnimationTabHost) this.findViewById(android.R.id.tabhost);
		mHost.setOpenAnimation(true);
		mHost.setOnTabChangedListener(this);
		mHost.addTab(buildTabSpec("mtop_tab", R.string.main_home,
				R.drawable.icon_1_n, this.mTopIntent));

		mHost.addTab(buildTabSpec("fav_tab", R.string.main_at,
				R.drawable.icon_4_n, this.mFavIntent));

		mHost.addTab(buildTabSpec("notice_tab", R.string.main_search,
				R.drawable.search, this.mSearchIntent));

		mHost.addTab(buildTabSpec("mail_tab", R.string.main_message,
				R.drawable.icon_2_n, this.mMailIntent));
		mHost.addTab(buildTabSpec("more_tab", R.string.menu_more,
				R.drawable.main_more_icon, this.mMoreIntent));

	}

	private TabHost.TabSpec buildTabSpec(String tag, int resLabel, int resIcon,
			final Intent content) {
		return this.mHost
				.newTabSpec(tag)
				.setIndicator(getString(resLabel),
						getResources().getDrawable(resIcon))
				.setContent(content);
	}

	private void createShortCut() {
		boolean firstRun = MyApplication.mPreference.getBoolean(
				Preferences.FIRST_RUN, true);
		if (!firstRun) {
			return;
		}
		Intent intent = new Intent(
				"com.android.launcher.action.INSTALL_SHORTCUT");// action
		intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
				getString(R.string.app_name));// 快捷方式名字
		intent.putExtra("duplicate", false); // 是否重复创建快捷方式
		Parcelable icon = Intent.ShortcutIconResource.fromContext(
				getApplicationContext(), R.drawable.icon);
		intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, icon);// icon
		intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, new Intent(
				getApplicationContext(), Logo.class)); // 启动界面
		sendBroadcast(intent);// 发送广播
		MyApplication.mPreference.edit()
				.putBoolean(Preferences.FIRST_RUN, false).commit();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(Menu.NONE, Menu.FIRST + 1, 0, "关于");
		menu.add(Menu.NONE, Menu.FIRST + 2, 2, "注销");
		menu.add(Menu.NONE, Menu.FIRST + 3, 3, "退出");
		menu.add(Menu.NONE, Menu.FIRST + 4, 1, "设置");
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case Menu.FIRST + 1:
			Intent intent = new Intent(this, com.yuchao.ui.About.class);
			startActivity(intent);
			break;
		case Menu.FIRST + 2:
			logout();
			break;
		case Menu.FIRST + 3:
			exit();
			break;
		case Menu.FIRST + 4:
			Intent prefIntent = new Intent(this, com.yuchao.ui.Preference.class);
			startActivity(prefIntent);
			break;
		}
		return false;
	}

	private void logout() {
		CustomAlertDialog.Builder ab = new CustomAlertDialog.Builder(this);
		ab.setTitle("注销");
		ab.setMessage("您是否要注销？");
		ab.setPositiveButton("确定", new OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				final CustomProgressDialog.Builder pdialogBuilder = new CustomProgressDialog.Builder(HomeActivity.this);
				pdialogBuilder.setMessage("正在注销");
				pdialogBuilder.create();
				application.setUserName("");
				application.setToken("");
				Thread td = new Thread() {
					@Override
					public void run() {
						
						MyApplication.mPreference.edit().clear().commit();
						pdialogBuilder.dismiss();
						Intent intent = new Intent(HomeActivity.this,
								com.yuchao.ui.LoginActivity.class);
						startActivity(intent);
						finish();
					}
				};
				td.start();

			}
		});
		ab.setNegativeButton("取消", null);
		ab.create();
	}

	private void exit(){
		ExitTask exitTask = new ExitTask();
		exitTask.execute();
	}
	@Override
	public boolean dispatchKeyEvent(KeyEvent event) {
		// 会触发ACTION_DOWN和ACTION_UP事件，这里仅捕获ACTIONDOWN即可
		if (event.getKeyCode() == KeyEvent.KEYCODE_BACK
				&& event.getAction() == KeyEvent.ACTION_DOWN) {
			if (System.currentTimeMillis() - exitTime > 2000) {
				Toast.makeText(this, "再按一次返回键退出", Toast.LENGTH_SHORT).show();
				exitTime = System.currentTimeMillis();
			} else {
				exit();
				}
			return true;
		}
		return super.dispatchKeyEvent(event);
	}

	@Override
	public boolean dispatchTouchEvent(MotionEvent event) {

		if (gestureDetector.onTouchEvent(event)) {
			event.setAction(MotionEvent.ACTION_CANCEL);
		}

		return super.dispatchTouchEvent(event);

	}

	private class ExitTask extends AsyncTask<String, Integer, TaskResult> {
		private ProgressDialog pdialog;

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			pdialog = new ProgressDialog(HomeActivity.this);
			pdialog.setTitle("提示");
			// pdialog.setMessage("正在退出...");
			// pdialog.show();
			LinearLayout pdialogView = (LinearLayout) getLayoutInflater()
					.inflate(R.layout.pdialog, null);
			pdialog.show();
			pdialog.getWindow().setContentView(pdialogView);
			TextView msgView = (TextView) pdialog
					.findViewById(R.id.pdialog_msg);
			msgView.setText("正在退出...");
		}

		@Override
		protected TaskResult doInBackground(String... params) {
			// SBBSSupport.logout();
			return null;
		}

		@Override
		protected void onPostExecute(TaskResult result) {
			super.onPostExecute(result);
			pdialog.dismiss();
			HomeActivity.this.finish();
			android.os.Process.killProcess(android.os.Process.myPid());
		}

	}

	private class TabHostTouch extends SimpleOnGestureListener {
		/** 滑动翻页所需距离 */
		private static final int ON_TOUCH_DISTANCE = 120;

		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
				float velocityY) {
			/**
			 * 临时加上，防止误操作
			 * **/
			if (e1.getY() - e2.getY() < -80 || e1.getY() - e2.getY() > 80) {
				return false;
			}
			if (e1.getX() - e2.getX() <= (-ON_TOUCH_DISTANCE)) {
				currentTabID = mHost.getCurrentTab() - 1;
				if (currentTabID < 0) {
					currentTabID = mHost.getTabCount() - 1;
				}
			} else if (e1.getX() - e2.getX() >= ON_TOUCH_DISTANCE) {
				currentTabID = mHost.getCurrentTab() + 1;

				if (currentTabID >= mHost.getTabCount()) {
					currentTabID = 0;
				}
			}
			Log.i("HomeActivity", "currentTab is " + currentTabID);
			mHost.setCurrentTab(currentTabID);
			return false;
		}
	}

	private void checkNetworkInfo() {
		ConnectivityManager conMan = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

		// mobile 3G Data Network
		State mobile = conMan.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)
				.getState();
		// wifi
		State wifi = conMan.getNetworkInfo(ConnectivityManager.TYPE_WIFI)
				.getState();

		// 如果3G网络和wifi网络都未连接，且不是处于正在连接状态 则进入Network Setting界面 由用户配置网络连接
		if (mobile == State.CONNECTED || mobile == State.CONNECTING)
			return;
		if (wifi == State.CONNECTED || wifi == State.CONNECTING)
			return;
		AlertDialog.Builder ab = new AlertDialog.Builder(this);
		ab.setTitle("提示");
		ab.setMessage("无网络连接，是否设置网络状态？");
		ab.setPositiveButton("确	定", new DialogInterface.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));// 进入无线网络配置界面
			}
		});
		ab.setNegativeButton("取消", null);
		ab.show();

		// startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
		// //进入手机中的wifi网络设置界面

	}
}