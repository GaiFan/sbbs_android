package com.gfan.ui.Adapter;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.text.Html;
import android.text.Spanned;
import android.text.method.LinkMovementMethod;
import android.text.util.Linkify;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

import com.yuchao.domain.Attachment;
import com.yuchao.domain.Topic;
import com.yuchao.ui.R;

/**
 * 定义同主题模式下数据适配器
 * @author Nine
 *
 */
public class TopReplyAdapter extends BaseAdapter{
    public List<Topic> threadList;
    public Context context;
	public TopReplyAdapter(Context context){
		threadList = new ArrayList<Topic>();
		this.context = context;
	}
	@Override
	public int getCount() {
		return threadList.size();
	}
	@Override
	public Object getItem(int position) {
		return threadList.get(position);
	}
	@Override
	public long getItemId(int position) {
		return 0;
	}
	public void refresh(List<Topic> list){
		this.threadList = list;
		notifyDataSetChanged();
	}
	public void refresh(){
		notifyDataSetChanged();
	}
	
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder = null;
         if(convertView == null){//查看内存中是否已经有数据
        	 convertView = LayoutInflater.from(context).inflate(R.layout.listview_item_reply, null);
        	 holder = new ViewHolder();
 			 holder.txt_content = (TextView) convertView.findViewById(R.id.list_reply_text_content);
 			 holder.txt_author = (TextView) convertView.findViewById(R.id.list_reply_text_author);
 			 holder.txt_quoter = (TextView) convertView.findViewById(R.id.list_reply_text_quoter);
 			 holder.txt_quote = (TextView) convertView.findViewById(R.id.list_reply_text_quote);
 			 holder.txt_time = (TextView) convertView.findViewById(R.id.list_reply_text_time);
 			 holder.txt_att = (TextView) convertView.findViewById(R.id.list_reply_att_link);
 			 holder.txt_att_label = (TextView) convertView.findViewById(R.id.list_reply_att_label);
 			 convertView.setTag(holder);
         }else{
        	 holder = (ViewHolder) convertView.getTag();
         }

		//设定这个条目的内容
        Topic topic = threadList.get(position);
		holder.userInfo = topic.getAuthor();
		holder.content = topic.getContent();	
		holder.txt_author.setText(holder.userInfo);
		Spanned content = Html.fromHtml(holder.content);
		holder.txt_content.setText(content);
		Linkify.addLinks(holder.txt_content, Linkify.ALL);
		holder.txt_content.setMovementMethod(LinkMovementMethod.getInstance());
		if(null != topic.getQuoter()){
			holder.txt_quoter.setVisibility(View.VISIBLE);
			holder.txt_quoter.setText("在 "+topic.getQuoter()+" 的大作中提到：");
		}else{
			holder.txt_quoter.setVisibility(View.GONE);
		}
		holder.txt_quote.setText(topic.getQuote());
		holder.txt_time.setText(topic.getTime());
		if(topic.isHasAtt()){
			holder.txt_att.setVisibility(View.VISIBLE);
			holder.txt_att_label.setVisibility(View.VISIBLE);
			StringBuffer sb = new StringBuffer();
			List<Attachment> attList = topic.getAttList();
			for(int i = 0,len = attList.size();i < len;i++){
				Attachment att = attList.get(i);
				sb.append("<a href='").append(att.getUrl()).append("'>");
				sb.append(att.getFileName()).append("</a><br/><br/>");
			}
			holder.txt_att.setText(Html.fromHtml(sb.toString()));
			holder.txt_att.setMovementMethod(LinkMovementMethod.getInstance());
		}else{
			holder.txt_att.setVisibility(View.GONE);
			holder.txt_att_label.setVisibility(View.GONE);
		}
		return convertView;
	}
 
 //定义静态类用于获取列表中每一个条目数据的更新
 private static class ViewHolder {
		TextView txt_content;
		TextView txt_author;
		TextView txt_time;
		TextView txt_quoter;
		TextView txt_quote;
		TextView txt_att;
		TextView txt_att_label;
		String userInfo;
		String content;
	}
}