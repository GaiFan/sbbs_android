package com.yuchao.ui;


import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.gfan.sbbs.MyApplication;
import com.gfan.sbbs.SBBSConstants;
import com.gfan.task2.TaskResult;
import com.gfan.ui.base.BaseActivity;
import com.umeng.analytics.MobclickAgent;
import com.yuchao.task.GenericTask;
import com.yuchao.task.TaskAdapter;
import com.yuchao.task.TaskListener;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

public class WriteMail extends BaseActivity {
	private EditText titleView, recieverView, contentView;
	private String reid, title, reciever, content, errorCause;
	private GenericTask doSendTask;
	private static final int MENU_SEND = 0;
	public static final String EXTRA_RECIEVER = "reciever";
	public static final String EXTRA_TITLE = "title";
	public static final String EXTRA_REID = "reid";

	private TaskListener mSendTaskListener = new TaskAdapter() {
		ProgressDialog pdialog;

		@Override
		public String getName() {
			return "mSendTaskListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			pdialog = new ProgressDialog(WriteMail.this);
			pdialog.setMessage("正在发送...");
			pdialog.show();
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			pdialog.dismiss();
			send(result);
		}
	};

	@Override
	protected void _onCreate(Bundle savedInstanceState) {
		super._onCreate(savedInstanceState);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
	}

	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}

	private boolean validate() {
		title = titleView.getText().toString();
		reciever = recieverView.getText().toString().trim();
		content = contentView.getText().toString().trim();
		if (TextUtils.isEmpty(title)) {
			Toast.makeText(WriteMail.this, "标题不能为空", Toast.LENGTH_SHORT).show();
			return false;
		}
		if (TextUtils.isEmpty(reciever)) {
			Toast.makeText(WriteMail.this, "收信人不能为空！", Toast.LENGTH_SHORT)
					.show();
			return false;
		}
		return true;
	}

	private void doSend() {
		String token = MyApplication.getToken();
		doSendTask = new DoSendTask();
		doSendTask.setListener(mSendTaskListener);
		doSendTask.execute(reciever, title, content, reid, token);
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	private void initView() {
		titleView = (EditText) this.findViewById(R.id.new_mail_title);
		contentView = (EditText) this.findViewById(R.id.new_mail_content);
		recieverView = (EditText) this.findViewById(R.id.new_mail_to);
	}

	public void send(TaskResult result) {

		if (TaskResult.Failed == result) {
			Toast.makeText(this, errorCause, Toast.LENGTH_SHORT).show();
			return;
		}
		Toast.makeText(this, "发送成功", Toast.LENGTH_SHORT).show();
		finish();
	}

	@Override
	protected void onDestroy() {

		if (doSendTask != null && !doSendTask.isCancelled()) {
			doSendTask.cancel(true);
		}
		super.onDestroy();
	}

	private class DoSendTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			boolean result = false;
			// 此处参数分别为收信人、邮件标题、邮件内容、reid
			String url = SBBSConstants.BASE_URL + "/api/mail/send.json?token="
					+ token;
			result = MyApplication.bbsOp.doPostMail(url, params[0], params[1],
					params[2], params[3]);
			if (result) {
				return TaskResult.OK;
			} else {
				return TaskResult.Failed;
			}
		}

	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case MENU_SEND:
			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(contentView.getWindowToken(), 0);
			if (validate()) {
				doSend();
			}
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, MENU_SEND, 0, "send")
				.setIcon(R.drawable.ic_menu_send_holo_light)
				.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	protected void processUnLogin() {
		Toast.makeText(this, "请登录后使用", Toast.LENGTH_SHORT).show();
		finish();
		return;
	}

	@Override
	protected void setup() {
		LayoutInflater inflater = getLayoutInflater();
		LinearLayout writeMailLayout = (LinearLayout) inflater.inflate(
				R.layout.write_mail, null);
		this.setContentView(writeMailLayout);
		initView();
		setTitle("写邮件");

		String reciever = "";
		Bundle bundle = getIntent().getExtras();
		if (bundle != null) {
			reciever = getIntent().getExtras().getString("reciever");
			reid = getIntent().getExtras().getString(EXTRA_REID);
			if (reid == null) {
				reid = "0";
			}
			String getTitle = getIntent().getExtras().getString(EXTRA_TITLE);
			if (!TextUtils.isEmpty(reciever)) {
				recieverView.setText(reciever);
				recieverView.setEnabled(false);
			}

			if (getTitle != null) {
				if (getTitle.contains("Re:")) {
					titleView.setText(getTitle);
				} else {
					titleView.setText("Re: " + getTitle);
				}
				contentView.requestFocus();
				contentView.setSelection(0);
			}
		}
	}
}
