package com.yuchao.ui;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.json.JSONException;

import com.gfan.sbbs.MyApplication;
import com.gfan.task2.FailureException;
import com.gfan.task2.TaskResult;
import com.gfan.ui.Adapter.MailAdapter;
import com.laohuai.appdemo.customui.ui.MyListView;
import com.yuchao.db.MailDAO;
import com.yuchao.domain.Mail;
import com.yuchao.task.GenericTask;
import com.yuchao.task.TaskAdapter;
import com.yuchao.task.TaskListener;
import com.yuchao.util.CustomProgressDialog;
import com.yuchao.util.SBBSSupport;

import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class MailActivity extends BaseActivity {
	private TextView titleView;
	private LayoutInflater inflater;
	private LinearLayout mailLayout;
	private MyListView mailListView;
	private GenericTask doRetrieveTask;
	private MailAdapter myAdapter;
	private View moreView;
	private TextView moreBtn;
	private ImageView mailBtn,moreItemBtn;
	private LinearLayout progressbar;

	private List<Mail> mailList, inList, sendList, trashList;
	private boolean isFirstLoad = true,forceLoad = false;
	private String rUrl;

	private int start = 0, inStart = 0, sendStart = 0, trashStart = 0,
			headPosition;
	private int nowBox;
	private static final int LOADNUM = 20;
	private static final int MAILBOX = 0;
	private static final int SENDBOX = 1;
	private static final int DELETEBOX = 2;

	private static final int OPENREQUESTCODE = 0;
	private static final int DELMAIL = 1;

	private TaskListener mRetrieveListener = new TaskAdapter() {
		private CustomProgressDialog.Builder pdialogBuilder;

		@Override
		public String getName() {
			return "mRetrieveListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			if (isFirstLoad) {
				pdialogBuilder = new CustomProgressDialog.Builder(
						MailActivity.this);
				pdialogBuilder.create();
			}
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			if (null != pdialogBuilder) {
				pdialogBuilder.dismiss();
			}
			mailListView.onRefreshComplete();
			if (getResult(result)) {
				isFirstLoad = false;
				forceLoad = false;
				draw();
				goTop();
			}
		}
	};

	@Override
	protected boolean _onCreate(Bundle savedInstanceState) {
		if (super._onCreate(savedInstanceState)) {
			inflater = getLayoutInflater();
			mailLayout = (LinearLayout) inflater.inflate(R.layout.list_with_header,
					null);
			this.setContentView(mailLayout);
			initView();
			setupState();
			registerForContextMenu(mailListView);
			doRetrieve();
			return true;
		} else {
			return false;
		}
	}

	private void initView() {
		mailListView = (MyListView) this.findViewById(R.id.list_with_header);
		myAdapter = new MailAdapter(this);
		mailListView.setAdapter(myAdapter);
		titleView = (TextView) this.findViewById(R.id.new_header_txt);
		TextView newMailBtn = (TextView) this.findViewById(R.id.new_btn);
		newMailBtn.setVisibility(View.GONE);
		mailBtn = (ImageView) this.findViewById(R.id.new_img_btn);
		moreItemBtn = (ImageView) this.findViewById(R.id.more_btn);
		mailBtn.setVisibility(View.VISIBLE);
		moreItemBtn.setVisibility(View.VISIBLE);
		Bundle bundle = getIntent().getExtras();
		if (bundle != null) {
			nowBox = bundle.getInt("type");
		} else {
			nowBox = MAILBOX;
		}
		setName(nowBox);
		rUrl = "http://bbs.seu.edu.cn/api/mailbox/get.json?token="
				+ MyApplication.getToken();
		moreView = getLayoutInflater().inflate(R.layout.moredata, null);
		moreBtn = (TextView) moreView.findViewById(R.id.load_more_btn);
		progressbar = (LinearLayout) moreView.findViewById(R.id.more_progress);
		mailListView.addFooterView(moreView);
		inList = new ArrayList<Mail>();
		sendList = new ArrayList<Mail>();
		trashList = new ArrayList<Mail>();
	}

	private void setupState() {
		moreItemBtn.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				showPopWindow();

			}
		});
		mailListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1,
					int position, long id) {
				createMailActivity(position);
			}
		});
		mailListView.setonRefreshListener(new MyListView.OnRefreshListener() {

			@Override
			public void onRefresh() {
				isFirstLoad = true;
				start = 0;
				forceLoad = true;
				doRetrieve();
			}
		});
		moreBtn.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				doLoadMore();
			}
		});
		mailBtn.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intent = new Intent(MailActivity.this, WriteMail.class);
				startActivity(intent);
			}
		});
	}

	private List<Mail> getMailList(int box) {
		switch (box) {
		case MAILBOX:
			return inList;
		case SENDBOX:
			return sendList;
		case DELETEBOX:
			return trashList;
		default:
			return null;
		}
	}

	private void setName(int box){
		switch(box){
		case MAILBOX:
			titleView.setText("收件箱");
			break;
		case SENDBOX:
			titleView.setText("发件箱");
			break;
		case DELETEBOX:
			titleView.setText("垃圾箱");
			break;
		}
	}
	public int getStart(int box) {
		switch (box) {
		case MAILBOX:
			return inStart;
		case SENDBOX:
			return sendStart;
		case DELETEBOX:
			return trashStart;
		default:
			return 0;
		}
	}
	private void setStart(int box,int value){
		switch(box){
		case MAILBOX:
			inStart = value;
			break;
		case SENDBOX:
			sendStart = value;
			break;
		case DELETEBOX:
			trashStart = value;
			break;
		}
	}

	private void showPopWindow() {
		View popView = ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))
				.inflate(R.layout.pop_view, null);
		List<HashMap<String,String>> list = new ArrayList<HashMap<String, String>>();
		HashMap<String ,String> valueMap1 = new HashMap<String, String>();
		valueMap1.put("menuItemName", "收件箱");
		list.add(valueMap1);
		HashMap<String ,String> valueMap2 = new HashMap<String, String>();
		valueMap2.put("menuItemName", "发件箱");
		list.add(valueMap2);
		HashMap<String ,String> valueMap3 = new HashMap<String, String>();
		valueMap3.put("menuItemName", "垃圾箱");
		list.add(valueMap3);		
		ListView menuListView = (ListView) popView.findViewById(R.id.pop_list);
		SimpleAdapter menuAdapter = new SimpleAdapter(this, list, R.layout.pop_item, new String[]{"menuItemName"}, new int[]{R.id.pop_item});
		menuListView.setAdapter(menuAdapter);
		final PopupWindow pw = new PopupWindow(popView,getWindowManager().getDefaultDisplay().getWidth()/3,LayoutParams.WRAP_CONTENT,true);
		pw.setBackgroundDrawable(new BitmapDrawable());
		pw.setOutsideTouchable(true);
		pw.showAsDropDown(mailBtn);
		menuListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {				
				Log.i("MailActivity","position is "+position);

				switch(position){
				case 0:
					changeBox(MAILBOX);
					pw.dismiss();
					break;
				case 1:
					changeBox(SENDBOX);
					pw.dismiss();
					break;
				case 2:
					changeBox(DELETEBOX);
					pw.dismiss();
					break;
				}
				
			}
		});
	}

	private void createMailActivity(int position) {
		Mail mail = null;
		mail = getContextItemMail(position);
		if (null == mail) {
			return;
		}
		String num = mail.getNum();
		String author = mail.getFrom();
		String title = mail.getTitle();
		Bundle bundle = new Bundle();
		bundle.putString("num", num);
		bundle.putString("author", author);
		bundle.putString("title", title);
		bundle.putInt("position", position);
		bundle.putInt("type", nowBox);
		Intent intent = new Intent(this, MailBody.class);
		intent.putExtras(bundle);
		mail.setUnRead(false);
		startActivityForResult(intent, OPENREQUESTCODE);
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (myAdapter != null) {
			myAdapter.notifyDataSetChanged();
		}
	}

	private void doRetrieve() {
		String url = rUrl + "&type=" + nowBox + "&start=" + start + "&limit="
				+ LOADNUM;
		doRetrieveTask = new RetrieveMailTask();
		doRetrieveTask.setListener(mRetrieveListener);
		doRetrieveTask.execute(url);
	}

	private void doLoadMore() {
		forceLoad = true;
		moreBtn.setVisibility(View.GONE);
		progressbar.setVisibility(View.VISIBLE);
		doRetrieve();
	}

	private void changeBox(int box) {
		if (box == nowBox) {
			Toast.makeText(this, "当前您正在该页面", Toast.LENGTH_SHORT).show();
			return;
		}
		List<Mail> nowList = getMailList(nowBox);
		nowList.clear();
		nowList.addAll(mailList);// save current list
		mailList = getMailList(box);// point mailList to the desired mail list
		setStart(nowBox, start);
		start = getStart(box);
		setName(box);
		nowBox = box;
		if (0 == mailList.size()) {
			isFirstLoad = true;
			doRetrieve();
		} else {
			draw();
		}
	}

	private void draw() {
		myAdapter.refresh(mailList);
	}

	private void goTop() {
		mailListView.setSelection(headPosition);
	}

	public boolean getResult(TaskResult result) {
		moreBtn.setVisibility(View.VISIBLE);
		progressbar.setVisibility(View.GONE);
		if (TaskResult.IO_ERROR == result || TaskResult.Failed == result) {
			Toast.makeText(this, "加载失败，请尝试重新加载", 1).show();
			return false;
		}
		if (TaskResult.NO_DATA == result) {
			Toast.makeText(this, "您的信箱为空...", 1).show();
			return false;
		}
		return true;
	}

	private Mail getContextItemMail(int position) {
		if (position >= 1 && position <= myAdapter.getCount()) {
			return (Mail) myAdapter.getItem(position - 1);
		}
		return null;
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent intent) {
		switch (resultCode) { // resultCode为回传的标记，我在B中回传的是RESULT_OK
		case DELMAIL:
			Bundle bundle = intent.getExtras(); // data为B中回传的Intent
			int position = bundle.getInt("position");
			Mail mail = getContextItemMail(position);
			if (null == mail) {
				return;
			}
			mailList.remove(mail);
			MailDAO dao = new MailDAO(MyApplication.mContext);
			dao.deleteMail(mail, nowBox);
			myAdapter.notifyDataSetChanged();
			break;
		default:
			break;
		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		if (doRetrieveTask != null && !doRetrieveTask.isCancelled()) {
			doRetrieveTask.cancel(true);
		}
	}

	private class RetrieveMailTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			try {
				MailDAO dao = new MailDAO(MyApplication.mContext);
				List<Mail> list = dao.fetchMail(nowBox);
				if(0 == list.size() || forceLoad){
					List<Mail> newList = SBBSSupport.getMailListAPI(params[0]);
					if (isFirstLoad) {
						headPosition = 1;
						mailList = newList;
						if (null == list || list.size() == 0) {
							return TaskResult.NO_DATA;
						}
					} else {
						headPosition = mailList.size();
						mailList.addAll(newList);
					}
					start += newList.size();
					dao.deleteMail(nowBox);
					dao.insertMail(mailList, nowBox);
				}else{
					mailList = list;
					isFirstLoad = false;
				}
			} catch (IOException e) {
				e.printStackTrace();
				return TaskResult.IO_ERROR;
			} catch (JSONException e) {
				e.printStackTrace();
				return TaskResult.IO_ERROR;
			} catch (FailureException e) {
				e.printStackTrace();
				return TaskResult.Failed;
			}
			if (mailList.size() == 0) {
				return TaskResult.NO_DATA;
			}
			return TaskResult.OK;

		}

	}
}
