package com.yuchao.ui;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;


import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.gfan.http.HttpException;
import com.gfan.sbbs.MyApplication;
import com.gfan.sbbs.SBBSConstants;
import com.gfan.task2.TaskResult;
import com.gfan.utils.StringUtils;
import com.umeng.analytics.MobclickAgent;
import com.yuchao.domain.Topic;
import com.yuchao.task.GenericTask;
import com.yuchao.task.TaskAdapter;
import com.yuchao.task.TaskListener;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

public class WritePost extends com.gfan.ui.base.BaseActivity {
	private EditText titleView, contentView;
	private String boardID, reTitle, title, content, errorCause;
	private Integer reID, id;// 回复帖子id，该帖id
	private GenericTask doPostTask, doEditTask;
	private Topic topic;
	private static final int TYPE_POST = 0;
	private static final int TYPE_EDIT = 1;
	private int type = 0;// 默认为发文模式
	private File mImageFile;
	private Uri mImageUri;
	public static final String EXTRA_BOARD = "boardID";
	public static final String EXTRA_REID = "reID";
	public static final String EXTRA_TITLE = "title";
	public static final String EXTRA_CONTENT = "content";
	public static final String EXTRA_TOPIC = "topic_edit";

	private static final int MENU_SEND = 0;
	private static final int REQUEST_IMAGE_CAPTURE = 0;
	private static final String TAG = "WritePost";

	private TaskListener doPostListener = new TaskAdapter() {
		ProgressDialog pdialog;

		@Override
		public String getName() {
			return "doPostListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			pdialog = new ProgressDialog(WritePost.this);
			pdialog.setMessage("正在发送...");
			pdialog.show();
			pdialog.setCancelable(false);
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			pdialog.dismiss();
			send(result);
		}
	};

	@Override
	protected void _onCreate(Bundle savedInstanceState) {
		super._onCreate(savedInstanceState);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		LayoutInflater inflater = getLayoutInflater();
		LinearLayout newPostLayout = (LinearLayout) inflater.inflate(
				R.layout.newpost, null);
		this.setContentView(newPostLayout);
		initView();
		type = getIntent().getExtras().getInt("TYPE");
		if (TYPE_POST == type) {
			boardID = getIntent().getExtras().getString(EXTRA_BOARD);
			reID = getIntent().getExtras().getInt(EXTRA_REID);
			reTitle = getIntent().getExtras().getString(EXTRA_TITLE);
			// content = getIntent().getExtras().getString("content");
			setTitle("写文章");
		} else if (TYPE_EDIT == type) {
			Topic topic = (Topic) getIntent().getExtras().getSerializable(
					EXTRA_TOPIC);
			boardID = topic.getTalkSpace();
			id = topic.getId();
			reTitle = topic.getTitle();
			content = topic.getContent();
			contentView.setText(content);
			setTitle("编辑文章");
		}

		if (reTitle != null) {
			titleView.setText(reTitle);
			contentView.requestFocus();
			contentView.setSelection(0);
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}

	private boolean validate() {
		title = titleView.getText().toString();
		if (TextUtils.isEmpty(title)) {
			Toast.makeText(WritePost.this, "标题不能为空", Toast.LENGTH_SHORT).show();
			return false;
		}
		if (reID == null) {
			reID = 0;
		}
		return true;
	}

	private void doPost() {
		doPostTask = new DoPostTask();
		doPostTask.setListener(doPostListener);
		content = contentView.getText().toString().trim();
		doPostTask.execute(boardID, title, content, reID.toString(), token);
	}

	private void doEdit() {
		doEditTask = new doEditTask();
		doEditTask.setListener(doPostListener);
		title = titleView.getText().toString().trim();
		content = contentView.getText().toString().trim();
		doEditTask.execute(boardID, title, content, id.toString(), token);
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	private void initView() {
		titleView = (EditText) this.findViewById(R.id.newpostTitle);
		contentView = (EditText) this.findViewById(R.id.newpostcontent);
	}

	private void send(TaskResult result) {

		if (TaskResult.Failed == result) {
			Toast.makeText(this, errorCause, Toast.LENGTH_SHORT).show();
			return;
		}
		Toast.makeText(this, "发表成功", Toast.LENGTH_SHORT).show();
		Intent intent = new Intent(this, SinglePostActivity.class);
		Bundle bundle = new Bundle();
		bundle.putSerializable("topic", topic);
		intent.putExtras(bundle);
		startActivity(intent);
		finish();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, MENU_SEND, Menu.NONE, "post")
				.setIcon(R.drawable.ic_menu_send_holo_light)
				.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
		menu.add(Menu.NONE, 12, Menu.NONE, "add photo").setShowAsAction(
				MenuItem.SHOW_AS_ACTION_IF_ROOM);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case MENU_SEND: {
			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(contentView.getWindowToken(), 0);
			if (validate()) {
				if (type == TYPE_POST) {
					doPost();
				} else {
					doEdit();
				}
			}
			break;
		}
		case 12:
			openImageCaptureMenu();
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	private String getPhotoFileName(Date date) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddKms");
		return dateFormat.format(date) + ".jpg";
	}

	protected void openImageCaptureMenu() {
		try {
			// TODO: API < 1.6, images size too small
			String filename = getPhotoFileName(new Date());
			mImageFile = new File(StringUtils.getBasePath(), filename);
			mImageUri = Uri.fromFile(mImageFile);
			Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
			intent.putExtra(MediaStore.EXTRA_OUTPUT, mImageUri);
			startActivityForResult(intent, REQUEST_IMAGE_CAPTURE);
		} catch (Exception e) {
			Log.e(TAG, e.getMessage());
		}
	}

	@Override
	protected void onDestroy() {
		if (null != doPostTask
				&& doPostTask.getStatus() == GenericTask.Status.RUNNING) {
			doPostTask.cancel(true);
		}
		Log.d("WritePost", "activity destroyed");
		super.onDestroy();
	}

	private class DoPostTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			// result = SBBSSupport.doPost(board, reid, post, title,
			// content);
			// topicAdapter = SBBSSupport.doPostAPI(params);
			String url = SBBSConstants.BASE_URL
					+ "/api/topic/post.json?type=1&token=" + token;
			try {
				topic = MyApplication.bbsOp.doPost(url, params[0], params[1],
						params[2], params[3]);
			} catch (HttpException e) {
				e.printStackTrace();
				errorCause = e.getMessage();
				return TaskResult.Failed;
			}
			return TaskResult.OK;
		}
	}

	private class doEditTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			String url = SBBSConstants.BASE_URL
					+ "/api/topic/edit.json?type=1&token=" + token;
			try {
				topic = MyApplication.bbsOp.doEdit(url, params[0], params[1],
						params[2], params[3]);
			} catch (HttpException e) {
				e.printStackTrace();
				errorCause = e.getMessage();
				return TaskResult.Failed;
			}
			return TaskResult.OK;
		}

	}

	@Override
	protected void processUnLogin() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void setup() {
		// TODO Auto-generated method stub

	}
}
