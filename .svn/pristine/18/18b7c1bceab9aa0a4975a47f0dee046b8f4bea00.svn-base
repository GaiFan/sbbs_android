package com.yuchao.ui;

import java.util.ArrayList;
import java.util.List;


import com.gfan.http.HttpException;
import com.gfan.sbbs.MyApplication;
import com.gfan.sbbs.Preferences;
import com.gfan.task2.ImageCache;
import com.gfan.task2.TaskResult;
import com.gfan.ui.base.BaseActivity;
import com.umeng.analytics.MobclickAgent;
import com.yuchao.domain.Attachment;
import com.yuchao.domain.Topic;
import com.yuchao.task.GenericTask;
import com.yuchao.task.TaskAdapter;
import com.yuchao.task.TaskListener;


import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.text.ClipboardManager;
import android.text.Html;
import android.text.TextUtils;
import android.text.method.LinkMovementMethod;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class SinglePostActivity extends BaseActivity implements
		Attachment.ImageLoadListener {
	private Topic topic;
	private TextView postTitle;
	private TextView textTime;
	private TextView textAuthor;
	private TextView textContent;
	private TextView textQuote;
	private TextView textQuoter;
	private TextView textSourceIP;

	private TextView shareView, replyView, authorView, mailView, moreView;
	private LinearLayout imgLayout;
	private List<Attachment> attList;
	private String boardID, url, errorCause;
	private int id;
	private GenericTask doRetrieveTask;
	private List<GenericTask> getPhotoTaskList;
	private List<Attachment> imageList;
	private Attachment onLoadingAttachment;
	private MyApplication application;
	private static final int MENU_REFRESH = 1;

	private static Bitmap mDefaultBitmap = ImageCache.mDefaultBitmap;
	private static final int MENU_ONE_TOPIC = Menu.FIRST;
	private static final int MENU_COPY = Menu.FIRST + 1;
	private static final int MENU_ONE_TOPIC_ALL = Menu.FIRST + 2;
	private static final int MENU_EDIT = Menu.FIRST + 3;

	private static final String LAUNCH_ACTION = "com.yuchao.ui.SINGLEPOST";

	private TaskListener mRetrieveTaskListener = new TaskAdapter() {
		private ProgressDialog pdialog;

		@Override
		public String getName() {
			return "mRetrieveTaskListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			pdialog = new ProgressDialog(SinglePostActivity.this);
			pdialog.setMessage(getResources().getString(R.string.loading));
			pdialog.show();
			pdialog.setCancelable(false);
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			super.onPostExecute(task, result);
			pdialog.dismiss();
			processResult(result);
		}
	};

	private TaskListener mGetPhotoTaskListener = new TaskAdapter() {

		@Override
		public String getName() {
			return "mGetPhotoTaskListener";
		}

		@Override
		public void onPreExecute(GenericTask task) {
			super.onPreExecute(task);
			// ImageView imageView = new ImageView(SinglePostActivity.this);
			// LayoutParams layoutParams = new LayoutParams(
			// LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			// imageView.setLayoutParams(layoutParams);
			// imageView.setImageBitmap(mDefaultBitmap);
			// imgLayout.addView(imageView);
			// ((GetPhotoTask) task).setiView(imageView);
		}

		@Override
		public void onPostExecute(GenericTask task, TaskResult result) {
			if (TaskResult.Failed == result) {
				Toast.makeText(SinglePostActivity.this, "Õº∆¨º”‘ÿ ß∞‹",
						Toast.LENGTH_SHORT).show();

			}
			Bitmap bitmap = ((GetPhotoTask) task).getBitmap();
			if (null != bitmap) {
				bitmap = processPhoto(bitmap);
				onLoadingAttachment.getIView().setImageBitmap(bitmap);
//				bitmap.recycle();
			}
			onLoadingAttachment.setImageLoadFinish(true);
		}
	};

	public static Intent createIntent(Context context) {
		Intent intent = new Intent(LAUNCH_ACTION);
		intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		return intent;
	}

	@Override
	protected void _onCreate(Bundle savedInstanceState) {
		super._onCreate(savedInstanceState);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		LayoutInflater inflater = getLayoutInflater();
		LinearLayout postLayout = (LinearLayout) inflater.inflate(
				R.layout.singlepost, null);
		this.setContentView(postLayout);
		imgLayout = (LinearLayout) postLayout.findViewById(R.id.post_att);
		topic = (Topic) getIntent().getExtras().getSerializable("topic");
		getPhotoTaskList = new ArrayList<GenericTask>();
		initUrl();
		initView();
		setupState();
		if (null != topic) {
			createTopic(topic);
			processAtt();
		} else {
			doRetrieve();
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	private void doRetrieve() {
		doRetrieveTask = new RetrieveTask();
		doRetrieveTask.setListener(mRetrieveTaskListener);
		doRetrieveTask.execute(url);
	}

	private void doLoadImage(Attachment att) {
		GenericTask getPhotoTask = new GetPhotoTask();
		getPhotoTaskList.add(getPhotoTask);
		getPhotoTask.setListener(mGetPhotoTaskListener);
		getPhotoTask.execute(att.getUrl());

	}

	private void processAtt() {
		TextView attLabel = (TextView) this.findViewById(R.id.post_att_label);
		TextView attLink = (TextView) this.findViewById(R.id.post_att_link);
		if (topic.isHasAtt()) {
			StringBuffer sb = new StringBuffer();
			Attachment att;
			for (int i = 0, len = attList.size(); i < len; i++) {
				att = attList.get(i);
				boolean loadPic = MyApplication.mPreference.getBoolean(
						Preferences.LOADPIC, true);
				boolean isImage = att.isImage();
				if (loadPic && isImage) {
					att.setIView(this);
					ImageView imageView = att.getIView();
					LayoutParams layoutParams = new LayoutParams(
							LayoutParams.WRAP_CONTENT,
							LayoutParams.WRAP_CONTENT);
					imageView.setLayoutParams(layoutParams);
					imageView.setImageBitmap(mDefaultBitmap);
					imgLayout.addView(imageView);
					imageList.add(att);
				} else {
					sb.append("<a href='").append(att.getUrl()).append("'>");
					sb.append(att.getFileName()).append("</a><br/>");
				}
			}
			attLink.setText(Html.fromHtml(sb.toString()));
			attLink.setMovementMethod(LinkMovementMethod.getInstance());
			// imgLayout.addView(attLink);
			if (TextUtils.isEmpty(sb.toString().trim())) {
				attLink.setVisibility(View.GONE);
			}
		} else {
			attLabel.setVisibility(View.GONE);
			attLink.setVisibility(View.GONE);
		}
		if (imageList.size() > 0) {
			onLoadingAttachment = imageList.get(0);
			onLoadingAttachment.setImageLoadListener(this);
			doLoadImage(onLoadingAttachment);
		}
	}

	// private void processPhoto(ImageView imageView, Bitmap bitmap) {
	// imageView.setImageBitmap(bitmap);
	// }

	private void initUrl() {
		id = getIntent().getExtras().getInt("id");
		if (0 == id) {
			id = topic.getId();
		}
		boardID = getIntent().getExtras().getString("boardID");
		if (null == boardID && null != topic) {
			boardID = topic.getTalkSpace();
		}
		url = "http://bbs.seu.edu.cn/api/topic/" + boardID + "/" + id
				+ ".json?limit=1";
		if (isLogined()) {
			url = url.concat("&token=" + token);
		}
	}

	private void initView() {
		postTitle = (TextView) this.findViewById(R.id.PostTitle);
		textAuthor = (TextView) this.findViewById(R.id.post_text_author);
		textTime = (TextView) this.findViewById(R.id.post_text_time);
		textContent = (TextView) this.findViewById(R.id.post_text_content);
		textQuote = (TextView) this.findViewById(R.id.post_text_quote);
		textQuoter = (TextView) this.findViewById(R.id.post_text_quoter);
		textSourceIP = (TextView) this.findViewById(R.id.post_text_source);
		shareView = (TextView) this.findViewById(R.id.post_footer_share);
		replyView = (TextView) this.findViewById(R.id.post_footer_reply);
		authorView = (TextView) this.findViewById(R.id.post_footer_authorinfo);
		mailView = (TextView) this.findViewById(R.id.post_footer_mail);
		moreView = (TextView) this.findViewById(R.id.post_footer_more);
		imageList = new ArrayList<Attachment>();
	}

	private void setupState() {
		shareView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intent = new Intent(Intent.ACTION_SEND);
				intent.setType("image/png");
				String link = "http://bbs.seu.edu.cn/r/post/" + boardID + "/"
						+ id;
				// intent.putExtra(Intent.EXTRA_SUBJECT, "");
				intent.putExtra(Intent.EXTRA_TEXT,
						"#ª¢æ·¡˙Û¥BBSª∞Ã‚∑÷œÌ#°∂" + topic.getTitle() + "°∑:" + link);
				if (topic.isHasAtt()) {
					for (Attachment att : topic.getAttList()) {
						if (att.isImage()) {
							Uri u = Uri.parse(att.getUrl());

							intent.putExtra(Intent.EXTRA_STREAM, u);
							break;
						}
					}
				}
				startActivity(Intent.createChooser(intent, getTitle()));
			}
		});
		replyView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Bundle bundle = new Bundle();
				String title = topic.getTitle();
				if (!title.contains("Re:")) {
					title = "Re: ".concat(title);
				}
				bundle.putString("title", title);
				bundle.putString("boardID", boardID);
				bundle.putInt(WritePost.EXTRA_REID, id);
				bundle.putString("content", topic.getContent());
				bundle.putString("author", topic.getAuthor());
				Intent intent = new Intent(SinglePostActivity.this,
						WritePost.class);
				intent.putExtras(bundle);
				startActivity(intent);
			}
		});
		authorView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				String author = topic.getAuthor();
				Intent intent = new Intent(SinglePostActivity.this,
						ViewProfileActivity.class);
				Bundle bundle = new Bundle();
				bundle.putString("userID", author);
				intent.putExtras(bundle);
				startActivity(intent);
			}
		});
		mailView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				String author = topic.getAuthor();
				Intent intent = new Intent(SinglePostActivity.this,
						WriteMail.class);
				Bundle bundle = new Bundle();
				bundle.putString(WriteMail.EXTRA_RECIEVER, author);
				bundle.putString(WriteMail.EXTRA_TITLE, topic.getTitle());
				intent.putExtras(bundle);
				startActivity(intent);
			}
		});
		registerForContextMenu(moreView);
		moreView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				openContextMenu(v);
			}
		});
		textQuote.setClickable(true);
		textQuote.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intent = new Intent(SinglePostActivity.this,
						SinglePostActivity.class);
				Bundle bundle = new Bundle();
				int reid = topic.getReid();
				bundle.putString("boardID", boardID);
				bundle.putInt("id", reid);
				intent.putExtras(bundle);
				startActivity(intent);
			}
		});
		// ‘› ±√ª’“µΩsetOnclickListenerŒﬁ–ßµƒ∑Ω∑®...
		// π¿º∆ «“™setText÷Æ∫Û‘Ÿ…Ë÷√onClickListenser∑Ω∑®≤≈”––ß£¨‘› ±≤ª∏ƒ¡À
		textQuote.setOnTouchListener(new View.OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					Intent intent = new Intent(SinglePostActivity.this,
							SinglePostActivity.class);
					Bundle bundle = new Bundle();
					int reid = topic.getReid();
					bundle.putString("boardID", topic.getTalkSpace());
					bundle.putInt("id", reid);
					intent.putExtras(bundle);
					startActivity(intent);
					return true;
				} else {
					return false;
				}
			}
		});

	}

	private void processResult(TaskResult result) {
		if (TaskResult.IO_ERROR == result || TaskResult.Failed == result) {
			AlertDialog.Builder ab = new AlertDialog.Builder(this);
			ab.setTitle("Ã· æ");
			ab.setMessage("º”‘ÿ ß∞‹£¨ «∑Ò÷ÿ–¬º”‘ÿ");
			ab.setPositiveButton("»∑∂®", new OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {
					doRetrieve();
				}
			});
			ab.setNegativeButton("»°œ˚", null);
			ab.create();
			ab.show();
			return;
		}
		createTopic(topic);
		processAtt();
	}

	private void createTopic(Topic topic) {
		setTitle(topic.getTitle());
		postTitle.setText(topic.getTitle());
		textAuthor.setText(topic.getAuthor());
		textTime.setText(topic.getTime());
		textContent.setText(topic.getContent());
		if (null != topic.getQuoter()) {
			textQuoter.setText("“˝◊‘ " + topic.getQuoter());
		} else {
			textQuoter.setVisibility(View.GONE);
		}
		textQuote.setText(topic.getQuote());
		textSourceIP.setText(topic.getSourceIP());
		if (TextUtils.isEmpty(topic.getQuote())) {
			textQuote.setVisibility(View.GONE);
		}
		if (TextUtils.isEmpty(topic.getSourceIP())) {
			textSourceIP.setVisibility(View.GONE);
		}
		if (topic.isHasAtt()) {
			attList = topic.getAttList();
		}
	}

	@SuppressWarnings("deprecation")
	@Override
	public boolean onContextItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case MENU_ONE_TOPIC: {// Õ¨÷˜Ã‚≤Èø¥
			Intent intent = new Intent(this, Reply.class);
			Bundle bundle = new Bundle();
			String title = topic.getTitle();
			if (title.contains("Re:")) {
				title = title.replace("Re:", "").trim();
			}
			bundle.putString("title", title);
			bundle.putString("boardID", boardID);
			int id = topic.getId();
			bundle.putInt("id", id);
			intent.putExtras(bundle);
			startActivity(intent);
			break;
		}
		case MENU_COPY: {
			ClipboardManager cm = (ClipboardManager) this
					.getSystemService(Context.CLIPBOARD_SERVICE);
			cm.setText(topic.getContent());
			break;
		}
		case MENU_ONE_TOPIC_ALL: {
			Intent intent = new Intent(this, Reply.class);
			Bundle bundle = new Bundle();
			String title = topic.getTitle();
			if (title.contains("Re:")) {
				title = title.replace("Re:", "").trim();
			}
			bundle.putString("title", title);
			bundle.putString("boardID", boardID);
			int gid = topic.getGid();
			bundle.putInt("id", gid);
			intent.putExtras(bundle);
			startActivity(intent);
			break;
		}
		case MENU_EDIT: {
			Intent intent = new Intent(this, WritePost.class);
			Bundle bundle = new Bundle();
			bundle.putInt("TYPE", 1);// ±‡º≠ƒ£ Ω
			bundle.putSerializable("topic_edit", topic);
			intent.putExtras(bundle);
			startActivity(intent);
			break;
		}
		}
		return super.onContextItemSelected(item);
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		menu.setHeaderTitle("≤Ÿ◊˜");
		menu.add(0, MENU_ONE_TOPIC, 0, "Õ¨÷˜Ã‚’πø™(¥À¥¶)");
		menu.add(0, MENU_ONE_TOPIC_ALL, 0, "Õ¨÷˜Ã‚’πø™");
		menu.add(0, MENU_EDIT, 0, "±‡º≠");
		menu.add(0, MENU_COPY, 0, "∏¥÷∆");
	}

	@Override
	public boolean onOptionsItemSelected(
			com.actionbarsherlock.view.MenuItem item) {
		switch (item.getItemId()) {
		case MENU_REFRESH:
			imgLayout.removeAllViews();
			doRetrieve();
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu) {

		menu.add(0, MENU_REFRESH, 0, "refresh").setIcon(
				R.drawable.ic_refresh_inverse);
		return super.onCreateOptionsMenu(menu);
	}

	@SuppressWarnings("deprecation")
	private Bitmap processPhoto(Bitmap bitmap) {
		if (null == bitmap) {
			return null;
		}
		int originWidth = bitmap.getWidth();
		int originHeight = bitmap.getHeight();
		int screenWidth = getWindowManager().getDefaultDisplay().getWidth();
		double ratio = (double) ((double) originHeight / (double) originWidth);
		if (originWidth > screenWidth) {
			bitmap = Bitmap.createScaledBitmap(bitmap, screenWidth,
					(int) (screenWidth * ratio), false);
		}
		return bitmap;
	}

	@Override
	protected void onDestroy() {
		if (doRetrieveTask != null
				&& doRetrieveTask.getStatus() == GenericTask.Status.RUNNING) {
			doRetrieveTask.cancel(true);
		}
		for (GenericTask getPhotoTask : getPhotoTaskList) {
			if (null != getPhotoTask
					&& getPhotoTask.getStatus() == GenericTask.Status.RUNNING) {
				getPhotoTask.cancel(true);
			}
		}
		super.onDestroy();
	}

	private class RetrieveTask extends GenericTask {

		@Override
		protected TaskResult _doInBackground(String... params) {
			// ba = SBBSSupport.getBoardTopicListAPI(params[0], null);
			List<Topic> topicList = null;
			try {
				topicList = MyApplication.bbsOp.getTopicList(params[0]);
			} catch (HttpException e) {
				e.printStackTrace();
				errorCause = e.getMessage();
				return TaskResult.Failed;
			}
			topic = topicList.get(0);

			return TaskResult.OK;
		}
	}

	private class GetPhotoTask extends GenericTask {

		private Bitmap bitmap;

		// private ImageView iView;

		@Override
		protected TaskResult _doInBackground(String... params) {
			try {
				bitmap = MyApplication.bbsOp.getBitmap(params[0]);
			} catch (HttpException e) {
				e.printStackTrace();
				return TaskResult.Failed;
			}
			return TaskResult.OK;
		}

		public Bitmap getBitmap() {
			return bitmap;
		}
		//
		// public void setiView(ImageView iView) {
		// this.iView = iView;
		// }
		//
		// public ImageView getiView() {
		// return iView;
		// }

	}

	@Override
	protected void processUnLogin() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void setup() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPreImageLoad() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPostImageLoad() {
		
		imageList.remove(onLoadingAttachment);
		if (imageList.size() > 0) {
			onLoadingAttachment = imageList.get(0);
			onLoadingAttachment.setImageLoadListener(this);
			doLoadImage(onLoadingAttachment);
		}

	}
}